#!/usr/bin/env ruby
$:.unshift File.expand_path '../lib', File.dirname(__FILE__)
require 'arduino_ir_remote'
require 'args_parser'

args = ArgsParser.parse ARGV do
  arg :arduino, "arduino port", :default => ArduinoIrRemote.list[0]
  arg :read, "read IR Data", :alias => :r
  arg :write, "write IR Data", :alias => :w
  arg :list, "show list of IR Data"
  arg :temp, "show temperature", :alias => :t
  arg :version, "show version", :alias => :v
  arg :help, "show help", :alias => :h
end

if args.has_option? :version
  puts "Arduino IR Remote v#{ArduinoIrRemote::VERSION}"
  exit
end

binname = File.basename __FILE__
if args.has_option? :help or
    (!args.has_param?(:write) and !args.has_param?(:read) and
     !args.has_option?(:list) and !args.has_option?(:temp))
  STDERR.puts "Arduino IR Remote - https://github.com/shokai/arduino_ir_remote"
  STDERR.puts "--"
  STDERR.puts args.help
  STDERR.puts
  STDERR.puts "e.g."
  STDERR.puts " % #{binname} --read  tv_on"
  STDERR.puts " % #{binname} --write tv_on"
  exit
end

if args.has_option? :list
  puts "-- #{ArduinoIrRemote::DATA_FILE}"
  ArduinoIrRemote::DATA.each do |k,v|
    puts %Q{"#{k}" : #{v.size} bytes}
  end
  exit
end

ir = ArduinoIrRemote.connect args[:arduino]
ir.temp_pin = 0

if args.has_option? :temp
  puts ir.temp_sensor
  exit
end

if args.has_param? :write
  ir.on :write do |data|
    p data
    exit
  end
  unless ArduinoIrRemote::DATA.has_key? args[:write]
    puts %Q{there is no data "#{args[:write]}"}
    exit 1
  end
  puts %Q{Write "#{args[:write]}"}
  ir.write ArduinoIrRemote::DATA[ args[:write] ]
  ir.wait
end

if args.has_param? :read
  ir.read do |data|
    p data
    if ArduinoIrRemote::DATA.has_key? args[:read]
      puts %Q{overwrite "#{args[:read]}" ?}
      print "[Y/n]\n> "
      exit 1 if STDIN.gets.strip.downcase =~ /n/
    end
    ArduinoIrRemote::DATA[ args[:read] ] = data
    File.open(ArduinoIrRemote::DATA_FILE, "w+") do |f|
      f.write ArduinoIrRemote::DATA.to_h.to_yaml
    end
    puts %Q{"#{args[:read]}" saved!}
    exit 1
  end
  puts "reading.."
  ir.wait
end
